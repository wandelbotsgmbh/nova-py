name: Test Integration

on:
  push:
    tags:
      - '*-*'  # Matches tags containing a hyphen
  pull_request:
    branches:
      - main
      - feat/*
      - fix/*

jobs:
  test_integration:
    runs-on: ubuntu-latest
    env:
      CI_JOB_TIMEOUT: 3600  # Set your desired job timeout in seconds

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install required system packages
        run: |
          sudo apt-get update
          sudo apt-get install -y yq jq curl

      - name: Install Poetry
        run: pip install poetry

      - name: Create Kubernetes instance
        run: |
          JOB_TIMEOUT_MINUTES=$(( ${{ env.CI_JOB_TIMEOUT }} / 60 ))
          JOB_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          curl --fail -s -X 'GET' "https://k8s.wabo.run/instance?duration=${JOB_TIMEOUT_MINUTES}&comment=${JOB_URL}&install_service_manager=true" > k8s.response

      - name: Extract Kubernetes configuration
        run: |
          cat k8s.response | jq -r '.kubeconfig' | base64 -d > /tmp/kube.conf
          echo "KUBECONFIG=/tmp/kube.conf" >> $GITHUB_ENV
          API_URL="http://$(cat k8s.response | jq -r '.ip')/api/v1"
          echo "API_URL=${API_URL}" >> $GITHUB_ENV

      - name: Install Python dependencies
        run: |
          poetry lock --no-update
          poetry install --no-root --only dev

      - name: Wait for Service Manager Backend
        run: |
          sleep 10  # Wait a bit for the service to start
          curl --fail --retry 7 --retry-all-errors --retry-delay 5 "${{ env.API_URL }}/internal/cells"

      - name: Run Integration Tests
        env:
          PYTHONPATH: .
        run: |
          poetry run pytest --api_url=${{ env.API_URL }} -m "integration" tests/integration

      - name: Download Diagnosis Package
        if: always()
        run: |
          curl --fail --request GET \
            --url "${{ env.API_URL }}/internal/system/diagnosis-package/zip" \
            --header 'Accept: application/zip' -o diagnose-${{ github.run_id }}.zip

      - name: Upload Diagnosis Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: diagnosis-package
          path: diagnose-${{ github.run_id }}.zip

      - name: Terminate Kubernetes Instance
        if: always()
        run: |
          INSTANCE_ID=$(cat k8s.response | jq -r '.id')
          curl --fail -s -X 'PUT' "https://k8s.wabo.run/instance?instance_id=${INSTANCE_ID}&duration=0"
